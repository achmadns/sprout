#summary Why the Node-Graph data model is good.

Because a big part of what programmers do is to imagine typed data hierarchies that they then store with SQL, wrap in XML or JSON and send around; which in it's turn gets unwrapped and presented in a similar but often separate implementation on the other end. That data is then modified and sent all the way back to be stored again.

With a node-graph data model you only store, send and present nodes.

(Dis)Advantages:

Typed Data:

  + You can add more developers to the project with linearly increased productivity.`*`

  - You write alot of typed code that can't be reused.

  - API grows linearly with number of objects.

Node Data:

  + API stays the same (insert, update, delete and select node, see [http://rupy.se/sprout/se/rupy/sprout/Node.html Node] javadoc for more info).

  + Lots of methods become generic and reuse is inherently encouraged.

  + You can easily alter/hotdeploy the storage/transport system in realtime without interruption.

  +- You need to use a strict SOA architecture with few, preferrably one, developer(s) per service.

  - Demands alot from the programmer. (the hierarchy is not protected / the data can be corrupted)

Describe and Control the Tree

  We need a way to DCT if we are to use large teams on the same graph.

`*` If you are lucky to have symbiotic developers and strong leadership.