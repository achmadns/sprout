#summary Why the Node-Graph data model is good.

Because a big part of what programmers do is to imagine typed data hierarchies that they then store with SQL, wrap in XML or JSON and send around; which in it's turn gets unwrapped and presented in a similar but often separate implementation on the other end. That data is then modified and sent all the way back to be stored again.

With a node-graph data model you only store, send and present nodes.

(Dis)Advantages:

Typed Data:

  + You can add more developers to the project with linearly increased productivity.`*`

  - You write alot of typed code that can't be reused by any other language.

  - API grows linearly with number of objects.

Node Data:

  + API does not grow as number of objects grows.

  + Lots of methods become generic and reuse is inherently encouraged.

  + You can easily alter/hotdeploy the storage/transport system in realtime without interruption.

  - Your hierarchy is not protected.

  - Your data can be corrupted.

  +- You need to use a strict SOA architecture with few, preferrably one, developer(s) per service.

We need a way to describe and control the hierarchy if we are to use large teams on the same graph. This requirement will evolve new kinds of tools over the years to come, a control scheme that decribes and controls the heirarchy at the same time. Probably written in XML.