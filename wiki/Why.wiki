#summary Why the Node-Graph data model is good.

Because a big part of what programmers do is to imagine typed data hierarchies that they then wrap in SQL, XML or JSON and send around; which in it's turn gets unwrapped and presented in a similar but often separate implementation on the other end.

With a node-graph data model you only store, send and present nodes.

(Dis)Advantages:

Typed Data:

  + You can add more developers to the project with linearly increased productivity.`*`

  - You write alot of typed code.

Node Data:

  + API does not grow as number of objects grows.

  + Lots of methods become generic and reuse is inherently encouraged.

  + You can easily alter/hotdeploy the storage/transport system in realtime without interruption.

  - Your hierarchy is not protected.

  - Your data can be corrupted.

So we need a way to document/describe and control the hierarchy.

Imagine JSON where the values are always binary and the order of arrays makes sense, and then we add a way to describe the node and data meta types.

To be continued...